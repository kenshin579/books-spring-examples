<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.htm</welcome-file>
        <welcome-file>index.jsp</welcome-file>
        <welcome-file>default.html</welcome-file>
        <welcome-file>default.htm</welcome-file>
        <welcome-file>default.jsp</welcome-file>
    </welcome-file-list>

    <!--
      - contextConfigLocation 컨텍스트 파라미터를 명시하지 않으면 /WEB-INF/applicationContext.xml을
        설정 파일로 사용한다.
      - 클래스 패스에 위치한 파일로부터 설정 정보를 읽어 오고 싶다면 다음과 같이 classpath: 접두어를 사용하여 설정 파일을 명시한다.
     -->
    <!--<context-param>-->
    <!--<param-name>contextConfigLocation</param-name>-->
    <!--<param-value>-->
    <!--classpath:common.xml-->
    <!--</param-value>-->
    <!--</context-param>-->

    <!-- 공통 빈을 필요로 하는 경우, ContextLoaderListener를 사용하여 공통으로 사용될 빈을 설정할 수 있음
      - ContextLoaderListener를 ServletListener로 등록하고 contextConfigLocation 컨텍스트 파라미터를 이용하여
        공통으로 사용될 빈 정보를 담고 있는 설정 파일 목록을 지정하면 된다
      -->
    <!--<listener>-->
    <!--<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>-->
    <!--</listener>-->

    <!-- *.do로 들어오는 클라이언트의 요청을 DispatcherServlet이 처리함
      1. DispatcherServlet은 WEB-INF/ directory에 있는 [서블릿 이름]-servlet.xml 스프링 설정 파일로 사용함
    -->
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>*.do</url-pattern>
        <!--<url-pattern>/game/*</url-pattern>-->
    </servlet-mapping>

    <!--	<servlet>-->
    <!--		<servlet-name>dispatcherScan</servlet-name>-->
    <!--		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>-->
    <!--		<load-on-startup>1</load-on-startup>-->
    <!--	</servlet>-->
    <!---->
    <!--	<servlet-mapping>-->
    <!--		<servlet-name>dispatcherScan</servlet-name>-->
    <!--		<url-pattern>*.do</url-pattern>-->
    <!--		<url-pattern>/game/*</url-pattern>-->
    <!--	</servlet-mapping>-->

    <!--<filter>-->
    <!--<filter-name>profileFilter</filter-name>-->
    <!--<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>-->
    <!--<init-param>-->
    <!--<param-name>targetBeanName</param-name>-->
    <!--<param-value>webProfileBean</param-value>-->
    <!--</init-param>-->
    <!--<init-param>-->
    <!--<param-name>contextAttribute</param-name>-->
    <!--<param-value>-->
    <!--org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcher-->
    <!--</param-value>-->
    <!--</init-param>-->
    <!--<init-param>-->
    <!--<param-name>targetFilterLifecycle</param-name>-->
    <!--<param-value>true</param-value>-->
    <!--</init-param>-->
    <!--</filter>-->

    <!--<filter-mapping>-->
    <!--<filter-name>profileFilter</filter-name>-->
    <!--<url-pattern>*.do</url-pattern>-->
    <!--</filter-mapping>-->

    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>EUC-KR</param-value>
        </init-param>
    </filter>

    <!--<filter-mapping>-->
    <!--<filter-name>encodingFilter</filter-name>-->
    <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->
</web-app>